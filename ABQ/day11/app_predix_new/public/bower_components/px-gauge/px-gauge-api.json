{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "### Usage\n\nSimple\n\n    <px-gauge value=\"10\"></px-gauge>\n\nAdvanced\n\n    <px-gauge value=\"30\"\n        min=\"0\"\n        max=\"100\"\n        bar-width=\"0\"\n        unit=\"unit\"\n        error=\"[ [0, 12], [79, 100] ]\"\n        abnormal=\"[  [12, 32], [68, 79]  ]\"\n        anomaly=\"[ [32, 45],  [54, 68]  ]\"\n        normal=\"[ [45, 54] ]\">\n    </px-gauge>\n\n### Styling\n  The following custom properties are available for styling.\n\nCustom property | Description\n----------------|-------------\n`--px-gauge-fill-error-color` | Color of the gauge fill in error state\n`--px-gauge-fill-anomaly-color` | Color of the gauge fill in anomaly state\n`--px-gauge-fill-abnormal-color` | Color of the gauge fill in abnormal state\n`--px-gauge-fill-normal-color` | Color of the gauge fill in normal state\n`--px-gauge-empty-color` | Color of the gauge background\n`--px-gauge-needle-color` | Color of the gauge needle",
      "summary": "",
      "path": "px-gauge.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Margin between SVG and parent node",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1974,
              "column": 4
            },
            "end": {
              "line": 1976,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "value",
          "type": "number",
          "description": "Current value of the gauge.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "error",
          "type": "Array",
          "description": "Array of error ranges, expressed as pairs of numbers (not percentages).\nIf current value belongs to an error range, state of filled gauge bar will be changed to error and color of error state will be applied to filled bar.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_changeFilledGaugeBarState\""
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "anomaly",
          "type": "Array",
          "description": "Array of anomaly ranges, expressed as pairs of numbers (not percentages).\nIf current value belongs to an anomaly range, state of filled gauge bar will be changed to anomaly and color of anomaly state will be applied to filled bar",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_changeFilledGaugeBarState\""
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "abnormal",
          "type": "Array",
          "description": "Array of abnormal ranges, expressed as pairs of numbers (not percentages).\nIf current value belongs to an abnormal range, state of filled gauge bar will be changed to abnormal and color of abnormal state will be applied to filled bar",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_changeFilledGaugeBarState\""
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "normal",
          "type": "Array",
          "description": "Array of normal ranges, expressed as pairs of numbers (not percentages).\nIf current value belongs to a normal range, state of filled gauge bar will be changed to normal and color of normal state will be applied to filled bar",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 162,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_changeFilledGaugeBarState\""
            }
          },
          "defaultValue": "[[0,100]]"
        },
        {
          "name": "_states",
          "type": "Array",
          "description": "List of states that can apply to filled gauge bar. Private, since the 4 corresponding properties are currently fixed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 177,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_changeFilledGaugeBarState\""
            }
          },
          "defaultValue": "[\"error\",\"abnormal\",\"anomaly\",\"normal\"]"
        },
        {
          "name": "min",
          "type": "number",
          "description": "Minimum value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "max",
          "type": "number",
          "description": "Maximum value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "unit",
          "type": "string",
          "description": "Unit label to display next to the gauge value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_valueOfProcess",
          "type": "number",
          "description": "This property is use for display the changing of value number",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 222,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "barWidth",
          "type": "number",
          "description": "Width of gauge bar. This property also impacts the size of the text labels.\nIf value of barWidth is 0, barWidth will be calculated based off the width of the gauge.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 6
            },
            "end": {
              "line": 235,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "_actualBarWidth",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_barWidthChanged\"",
              "readOnly": true
            }
          }
        },
        {
          "name": "_calculatedValue",
          "type": "number",
          "description": "Percent of input value base on min and max value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 6
            },
            "end": {
              "line": 254,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_valueChanged\"",
              "readOnly": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "preventResize",
          "type": "boolean",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_filledBarArc",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 6
            },
            "end": {
              "line": 286,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_emptyBarArc",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 290,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_targetPerc",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronResize",
          "description": "Resizes the chart based on a container resize if prevent-resize is false (default)\n\nCan also be called manually to force a chart resize to container.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 335,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeValue",
          "description": "Calculate percentage of input value base on min and max value",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 345,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Number",
            "desc": "The number will be used to calculate needle position"
          }
        },
        {
          "name": "_computeActualBarWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 347,
              "column": 4
            },
            "end": {
              "line": 349,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "barWidth"
            },
            {
              "name": "width"
            }
          ]
        },
        {
          "name": "_d3Select",
          "description": "Select elements and convert them to D3 element object",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 358,
              "column": 4
            },
            "end": {
              "line": 360,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector",
              "type": "String",
              "description": "a valid CSS selector"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "D3 element object"
          }
        },
        {
          "name": "_percToDeg",
          "description": "Convert from percentage to degree",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 371,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "perc",
              "type": "Number",
              "description": "percentage"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "The number which is converted from percentage to degree"
          }
        },
        {
          "name": "_percToRad",
          "description": "Convert from percentage to radian",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 4
            },
            "end": {
              "line": 382,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "perc",
              "type": "Number",
              "description": "percentage"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "The number which is converted from percentage to radian"
          }
        },
        {
          "name": "_degToRad",
          "description": "Convert from degree to radian",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 393,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "deg",
              "type": "Number",
              "description": "degree"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "The number which is converted from degree to radian"
          }
        },
        {
          "name": "_valueChanged",
          "description": "Change position of needle and update gauge bars follow _calculatedValue",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 4
            },
            "end": {
              "line": 402,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_barWidthChanged",
          "description": "Re-render gauge bars with new bar width",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawChart",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 4
            },
            "end": {
              "line": 426,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawChartDebounced",
          "description": "Calculate element attributes and append require elements to main element",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 4
            },
            "end": {
              "line": 441,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calculateGaugeBarsArc",
          "description": "Calculate gauge bars radius and size, then append them to main element",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 454,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_generateNeedlePath",
          "description": "Generate needle paths",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 461,
              "column": 4
            },
            "end": {
              "line": 464,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_adjustFontSize",
          "description": "Adjust font-size of number and unit label base on bar width",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 4
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_repaintGauge",
          "description": "Calculate start and end radian of gauge bars.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 497,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_changeFilledGaugeBarState",
          "description": "Check which state can be applied to filled gauge bar by current value",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 519,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveTo",
          "description": "Change position of needle base on _calculatedValue",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 526,
              "column": 4
            },
            "end": {
              "line": 552,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "targetPerc"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 72,
          "column": 10
        },
        "end": {
          "line": 553,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Margin between SVG and parent node",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1974,
              "column": 4
            },
            "end": {
              "line": 1976,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "value",
          "description": "Current value of the gauge.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "error",
          "description": "Array of error ranges, expressed as pairs of numbers (not percentages).\nIf current value belongs to an error range, state of filled gauge bar will be changed to error and color of error state will be applied to filled bar.",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "anomaly",
          "description": "Array of anomaly ranges, expressed as pairs of numbers (not percentages).\nIf current value belongs to an anomaly range, state of filled gauge bar will be changed to anomaly and color of anomaly state will be applied to filled bar",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "abnormal",
          "description": "Array of abnormal ranges, expressed as pairs of numbers (not percentages).\nIf current value belongs to an abnormal range, state of filled gauge bar will be changed to abnormal and color of abnormal state will be applied to filled bar",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "normal",
          "description": "Array of normal ranges, expressed as pairs of numbers (not percentages).\nIf current value belongs to a normal range, state of filled gauge bar will be changed to normal and color of normal state will be applied to filled bar",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 162,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "min",
          "description": "Minimum value",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "max",
          "description": "Maximum value",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "unit",
          "description": "Unit label to display next to the gauge value.",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "bar-width",
          "description": "Width of gauge bar. This property also impacts the size of the text labels.\nIf value of barWidth is 0, barWidth will be calculated based off the width of the gauge.",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 6
            },
            "end": {
              "line": 235,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "prevent-resize",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "error-changed",
          "description": "Fired when the `error` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "anomaly-changed",
          "description": "Fired when the `anomaly` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "abnormal-changed",
          "description": "Fired when the `abnormal` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "normal-changed",
          "description": "Fired when the `normal` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "bar-width-changed",
          "description": "Fired when the `barWidth` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-gauge"
    }
  ]
}
