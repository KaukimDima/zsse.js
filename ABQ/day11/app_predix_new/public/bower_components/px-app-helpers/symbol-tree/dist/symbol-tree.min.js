(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a){return a(o,!0)}if(i){return i(o,!0)}var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++){s(r[o])}return s})({1:[function(require,module,exports){"use strict";var SymbolTreeNode=require("./SymbolTreeNode");var TreePosition=require("./TreePosition");var TreeIterator=require("./TreeIterator");function returnTrue(){return true}function reverseArrayIndex(array,reverseIndex){return array[array.length-1-reverseIndex]}var SymbolTree=function SymbolTree(description){this.symbol=Symbol(description||"SymbolTree data")};SymbolTree.prototype.initialize=function initialize(object){this._node(object);return object};SymbolTree.prototype._node=function _node(object){if(!object){return null}var node=object[this.symbol];if(node){return node}return object[this.symbol]=new SymbolTreeNode};SymbolTree.prototype.hasChildren=function hasChildren(object){return this._node(object).hasChildren};SymbolTree.prototype.firstChild=function firstChild(object){return this._node(object).firstChild};SymbolTree.prototype.lastChild=function lastChild(object){return this._node(object).lastChild};SymbolTree.prototype.previousSibling=function previousSibling(object){return this._node(object).previousSibling};SymbolTree.prototype.nextSibling=function nextSibling(object){return this._node(object).nextSibling};SymbolTree.prototype.parent=function parent(object){return this._node(object).parent};SymbolTree.prototype.lastInclusiveDescendant=function lastInclusiveDescendant(object){var lastChild;var current=object;while(lastChild=this._node(current).lastChild){current=lastChild}return current};SymbolTree.prototype.preceding=function preceding(object,options){var treeRoot=options&&options.root;if(object===treeRoot){return null}var previousSibling=this._node(object).previousSibling;if(previousSibling){return this.lastInclusiveDescendant(previousSibling)}return this._node(object).parent};SymbolTree.prototype.following=function following(object,options){var this$1=this;var treeRoot=options&&options.root;var skipChildren=options&&options.skipChildren;var firstChild=!skipChildren&&this._node(object).firstChild;if(firstChild){return firstChild}var current=object;do{if(current===treeRoot){return null}var nextSibling=this$1._node(current).nextSibling;if(nextSibling){return nextSibling}current=this$1._node(current).parent}while(current);return null};SymbolTree.prototype.childrenToArray=function childrenToArray(parent,options){var this$1=this;var array=options&&options.array||[];var filter=options&&options.filter||returnTrue;var thisArg=options&&options.thisArg||undefined;var parentNode=this._node(parent);var object=parentNode.firstChild;var index=0;while(object){var node=this$1._node(object);node.setCachedIndex(parentNode,index);if(filter.call(thisArg,object)){array.push(object)}object=node.nextSibling;++index}return array};SymbolTree.prototype.ancestorsToArray=function ancestorsToArray(object,options){var this$1=this;var array=options&&options.array||[];var filter=options&&options.filter||returnTrue;var thisArg=options&&options.thisArg||undefined;var ancestor=object;while(ancestor){if(filter.call(thisArg,ancestor)){array.push(ancestor)}ancestor=this$1._node(ancestor).parent}return array};SymbolTree.prototype.treeToArray=function treeToArray(root,options){var this$1=this;var array=options&&options.array||[];var filter=options&&options.filter||returnTrue;var thisArg=options&&options.thisArg||undefined;var object=root;while(object){if(filter.call(thisArg,object)){array.push(object)}object=this$1.following(object,{root:root})}return array};SymbolTree.prototype.childrenIterator=function childrenIterator(parent,options){var reverse=options&&options.reverse;var parentNode=this._node(parent);return new TreeIterator(this,parent,reverse?parentNode.lastChild:parentNode.firstChild,reverse?TreeIterator.PREV:TreeIterator.NEXT)};SymbolTree.prototype.previousSiblingsIterator=function previousSiblingsIterator(object){return new TreeIterator(this,object,this._node(object).previousSibling,TreeIterator.PREV)};SymbolTree.prototype.nextSiblingsIterator=function nextSiblingsIterator(object){return new TreeIterator(this,object,this._node(object).nextSibling,TreeIterator.NEXT)};SymbolTree.prototype.ancestorsIterator=function ancestorsIterator(object){return new TreeIterator(this,object,object,TreeIterator.PARENT)};SymbolTree.prototype.treeIterator=function treeIterator(root,options){var reverse=options&&options.reverse;return new TreeIterator(this,root,reverse?this.lastInclusiveDescendant(root):root,reverse?TreeIterator.PRECEDING:TreeIterator.FOLLOWING)};SymbolTree.prototype.index=function index(child){var this$1=this;var childNode=this._node(child);var parentNode=this._node(childNode.parent);if(!parentNode){return-1}var currentIndex=childNode.getCachedIndex(parentNode);if(currentIndex>=0){return currentIndex}currentIndex=0;var object=parentNode.firstChild;if(parentNode.childIndexCachedUpTo){var cachedUpToNode=this._node(parentNode.childIndexCachedUpTo);object=cachedUpToNode.nextSibling;currentIndex=cachedUpToNode.getCachedIndex(parentNode)+1}while(object){var node=this$1._node(object);node.setCachedIndex(parentNode,currentIndex);if(object===child){break}++currentIndex;object=node.nextSibling}parentNode.childIndexCachedUpTo=child;return currentIndex};SymbolTree.prototype.childrenCount=function childrenCount(parent){var parentNode=this._node(parent);if(!parentNode.lastChild){return 0}return this.index(parentNode.lastChild)+1};SymbolTree.prototype.compareTreePosition=function compareTreePosition(left,right){var this$1=this;if(left===right){return 0}var leftAncestors=[];{var leftAncestor=left;while(leftAncestor){if(leftAncestor===right){return TreePosition.CONTAINS|TreePosition.PRECEDING}leftAncestors.push(leftAncestor);leftAncestor=this$1.parent(leftAncestor)}}var rightAncestors=[];{var rightAncestor=right;while(rightAncestor){if(rightAncestor===left){return TreePosition.CONTAINED_BY|TreePosition.FOLLOWING}rightAncestors.push(rightAncestor);rightAncestor=this$1.parent(rightAncestor)}}var root=reverseArrayIndex(leftAncestors,0);if(!root||root!==reverseArrayIndex(rightAncestors,0)){return TreePosition.DISCONNECTED}var commonAncestorIndex=0;var ancestorsMinLength=Math.min(leftAncestors.length,rightAncestors.length);for(var i=0;i<ancestorsMinLength;++i){var leftAncestor$1=reverseArrayIndex(leftAncestors,i);var rightAncestor$1=reverseArrayIndex(rightAncestors,i);if(leftAncestor$1!==rightAncestor$1){break}commonAncestorIndex=i}var leftIndex=this.index(reverseArrayIndex(leftAncestors,commonAncestorIndex+1));var rightIndex=this.index(reverseArrayIndex(rightAncestors,commonAncestorIndex+1));return rightIndex<leftIndex?TreePosition.PRECEDING:TreePosition.FOLLOWING};SymbolTree.prototype.remove=function remove(removeObject){var removeNode=this._node(removeObject);var parentNode=this._node(removeNode.parent);var prevNode=this._node(removeNode.previousSibling);var nextNode=this._node(removeNode.nextSibling);if(parentNode){if(parentNode.firstChild===removeObject){parentNode.firstChild=removeNode.nextSibling}if(parentNode.lastChild===removeObject){parentNode.lastChild=removeNode.previousSibling}}if(prevNode){prevNode.nextSibling=removeNode.nextSibling}if(nextNode){nextNode.previousSibling=removeNode.previousSibling}removeNode.parent=null;removeNode.previousSibling=null;removeNode.nextSibling=null;if(parentNode){parentNode.childrenChanged()}return removeObject};SymbolTree.prototype.insertBefore=function insertBefore(referenceObject,newObject){var referenceNode=this._node(referenceObject);var prevNode=this._node(referenceNode.previousSibling);var newNode=this._node(newObject);var parentNode=this._node(referenceNode.parent);if(newNode.isAttached){throw Error("Given object is already present in this SymbolTree, remove it first")}newNode.parent=referenceNode.parent;newNode.previousSibling=referenceNode.previousSibling;newNode.nextSibling=referenceObject;referenceNode.previousSibling=newObject;if(prevNode){prevNode.nextSibling=newObject}if(parentNode&&parentNode.firstChild===referenceObject){parentNode.firstChild=newObject}if(parentNode){parentNode.childrenChanged()}return newObject};SymbolTree.prototype.insertAfter=function insertAfter(referenceObject,newObject){var referenceNode=this._node(referenceObject);var nextNode=this._node(referenceNode.nextSibling);var newNode=this._node(newObject);var parentNode=this._node(referenceNode.parent);if(newNode.isAttached){throw Error("Given object is already present in this SymbolTree, remove it first")}newNode.parent=referenceNode.parent;newNode.previousSibling=referenceObject;newNode.nextSibling=referenceNode.nextSibling;referenceNode.nextSibling=newObject;if(nextNode){nextNode.previousSibling=newObject}if(parentNode&&parentNode.lastChild===referenceObject){parentNode.lastChild=newObject}if(parentNode){parentNode.childrenChanged()}return newObject};SymbolTree.prototype.prependChild=function prependChild(referenceObject,newObject){var referenceNode=this._node(referenceObject);var newNode=this._node(newObject);if(newNode.isAttached){throw Error("Given object is already present in this SymbolTree, remove it first")}if(referenceNode.hasChildren){this.insertBefore(referenceNode.firstChild,newObject)}else{newNode.parent=referenceObject;referenceNode.firstChild=newObject;referenceNode.lastChild=newObject;referenceNode.childrenChanged()}return newObject};SymbolTree.prototype.appendChild=function appendChild(referenceObject,newObject){var referenceNode=this._node(referenceObject);var newNode=this._node(newObject);if(newNode.isAttached){throw Error("Given object is already present in this SymbolTree, remove it first")}if(referenceNode.hasChildren){this.insertAfter(referenceNode.lastChild,newObject)}else{newNode.parent=referenceObject;referenceNode.firstChild=newObject;referenceNode.lastChild=newObject;referenceNode.childrenChanged()}return newObject};module.exports=SymbolTree;SymbolTree.TreePosition=TreePosition},{"./SymbolTreeNode":2,"./TreeIterator":3,"./TreePosition":4}],2:[function(require,module,exports){"use strict";module.exports=function(){function SymbolTreeNode(){this.parent=null;this.previousSibling=null;this.nextSibling=null;this.firstChild=null;this.lastChild=null;this.childrenVersion=0;this.childIndexCachedUpTo=null;this.cachedIndex=-1;this.cachedIndexVersion=NaN}var prototypeAccessors={isAttached:{},hasChildren:{}};prototypeAccessors.isAttached.get=function(){return Boolean(this.parent||this.previousSibling||this.nextSibling)};prototypeAccessors.hasChildren.get=function(){return Boolean(this.firstChild)};SymbolTreeNode.prototype.childrenChanged=function childrenChanged(){this.childrenVersion=this.childrenVersion+1&4294967295;this.childIndexCachedUpTo=null};SymbolTreeNode.prototype.getCachedIndex=function getCachedIndex(parentNode){if(this.cachedIndexVersion!==parentNode.childrenVersion){this.cachedIndexVersion=NaN;return-1}return this.cachedIndex};SymbolTreeNode.prototype.setCachedIndex=function setCachedIndex(parentNode,index){this.cachedIndexVersion=parentNode.childrenVersion;this.cachedIndex=index};Object.defineProperties(SymbolTreeNode.prototype,prototypeAccessors);return SymbolTreeNode}()},{}],3:[function(require,module,exports){"use strict";var TREE=Symbol();var ROOT=Symbol();var NEXT=Symbol();var ITERATE_FUNC=Symbol();var TreeIterator=function TreeIterator(tree,root,firstResult,iterateFunction){this[TREE]=tree;this[ROOT]=root;this[NEXT]=firstResult;this[ITERATE_FUNC]=iterateFunction};TreeIterator.prototype.next=function next(){var tree=this[TREE];var iterateFunc=this[ITERATE_FUNC];var root=this[ROOT];if(!this[NEXT]){return{done:true,value:root}}var value=this[NEXT];if(iterateFunc===1){this[NEXT]=tree._node(value).previousSibling}else if(iterateFunc===2){this[NEXT]=tree._node(value).nextSibling}else if(iterateFunc===3){this[NEXT]=tree._node(value).parent}else if(iterateFunc===4){this[NEXT]=tree.preceding(value,{root:root})}else{this[NEXT]=tree.following(value,{root:root})}return{done:false,value:value}};Object.defineProperty(TreeIterator.prototype,Symbol.iterator,{value:function(){return this},writable:false});TreeIterator.PREV=1;TreeIterator.NEXT=2;TreeIterator.PARENT=3;TreeIterator.PRECEDING=4;TreeIterator.FOLLOWING=5;Object.freeze(TreeIterator);Object.freeze(TreeIterator.prototype);module.exports=TreeIterator},{}],4:[function(require,module,exports){"use strict";module.exports=Object.freeze({DISCONNECTED:1,PRECEDING:2,FOLLOWING:4,CONTAINS:8,CONTAINED_BY:16})},{}],5:[function(require,module,exports){typeof window.SymbolTree==="undefined"&&(window.SymbolTree=require("symbol-tree"))},{"symbol-tree":1}]},{},[5]);
