{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A container to which content from px-overlay-content is hoisted. This is done to escape out of stacking contexts so overlays / modals / floating content can be shown over other content.\n\n### Usage\n\n#### Generic\n```\n    <px-overlay-container></px-overlay-container>\n```\n\n#### For content with matching type\n```\n    <px-overlay-container container-type=\"foo\"></px-overlay-container>\n```\n\n### Styling\n\nThe following custom properties are available for styling of the overlay container.\n\nCustom property | Description\n:----------------|:-------------\n`--px-overlay-container-z-index` | The z-index of the container",
      "summary": "",
      "path": "px-overlay-container.html",
      "properties": [
        {
          "name": "containerType",
          "type": "string",
          "description": "An optional type set on the px-overlay-container and px-overlay-content to associate specific overlay-contents with their container",
          "privacy": "public",
          "sourceRange": {
            "file": "px-overlay-behavior.html",
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxOverlayBehavior.sharedProperties"
        },
        {
          "name": "_overlayHost",
          "type": "HTMLElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_parent",
          "type": "HTMLElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_attachedOverlays",
          "type": "Map",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_attachmentRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 152,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "appendNewContent",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "content"
            }
          ]
        },
        {
          "name": "detachContent",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ]
        },
        {
          "name": "_getHostRoot",
          "description": "Returns the root element hosting the container.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 203,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Node"
          }
        },
        {
          "name": "_refireEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 216,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "removeElem",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlay"
            },
            {
              "name": "elem"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 10
        },
        "end": {
          "line": 232,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "container-type",
          "description": "An optional type set on the px-overlay-container and px-overlay-content to associate specific overlay-contents with their container",
          "sourceRange": {
            "file": "px-overlay-behavior.html",
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 25
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxOverlayBehavior.sharedProperties"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-overlay-container"
    },
    {
      "description": "A component which hoists it's slotted content up to a px-overlay-container. This is done to escape out of stacking contexts so overlays / modals / floating content can be shown over other content.\n\nIf no px-overlay-container is found between px-overlay-content and the document body, one is created at the document body.\n\n### Usage\n\n#### Generic\n```\n    <px-overlay-content\n        container-type=\"foo\"\n        event-names='[\"my-first-event-from-element-1\", \"my-second-event-from-my-element\"]'>\n        <my-element></my-element>\n    </px-overlay-content>\n```",
      "summary": "",
      "path": "px-overlay-content.html",
      "properties": [
        {
          "name": "containerType",
          "type": "string",
          "description": "An optional type set on the px-overlay-container and px-overlay-content to associate specific overlay-contents with their container",
          "privacy": "public",
          "sourceRange": {
            "file": "px-overlay-behavior.html",
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxOverlayBehavior.sharedProperties"
        },
        {
          "name": "_content",
          "type": "Array",
          "description": "Holder for the slotted content which will be hoisted",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_container",
          "type": "HTMLElement",
          "description": "The container to which content is hoisted",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 47,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_slot",
          "type": "HTMLElement",
          "description": "The slot element",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "eventNames",
          "type": "Array",
          "description": "A list of string event names that should get refired to this component from the container",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_isAttached",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "hoist",
          "type": "boolean",
          "description": "Whether this component should hoist it's content to a container or leave it local.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 101,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "hoistOverlay",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 135,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hoistPropChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hoist"
            }
          ]
        },
        {
          "name": "_onSlotChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getSlotContent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 176,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "removeChild",
          "description": "Removes a slotted child",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 4
            },
            "end": {
              "line": 210,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 32,
          "column": 10
        },
        "end": {
          "line": 212,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "container-type",
          "description": "An optional type set on the px-overlay-container and px-overlay-content to associate specific overlay-contents with their container",
          "sourceRange": {
            "file": "px-overlay-behavior.html",
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 25
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxOverlayBehavior.sharedProperties"
        },
        {
          "name": "event-names",
          "description": "A list of string event names that should get refired to this component from the container",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "hoist",
          "description": "Whether this component should hoist it's content to a container or leave it local.",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "px-overlay-content.html",
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 29
            }
          }
        }
      ],
      "tagname": "px-overlay-content"
    }
  ],
  "metadata": {
    "polymer": {
      "behaviors": [
        {
          "description": "    Name:\n    PxOverlayBehavior.sharedProperties\n\n    Description:\n    Polymer behavior that provides the containerType property\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-overlay-behavior.html",
          "properties": [
            {
              "name": "containerType",
              "type": "string",
              "description": "An optional type set on the px-overlay-container and px-overlay-content to associate specific overlay-contents with their container",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 23,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxOverlayBehavior.sharedProperties",
          "attributes": [
            {
              "name": "container-type",
              "description": "An optional type set on the px-overlay-container and px-overlay-content to associate specific overlay-contents with their container",
              "sourceRange": {
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 23,
                  "column": 25
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  }
}
