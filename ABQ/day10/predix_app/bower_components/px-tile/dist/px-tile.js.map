{"version":3,"sources":["px-tile.es6.js"],"names":["Polymer","is","properties","hoverable","type","Boolean","value","observer","_hovered","mainTitle","String","subtitle","description","overlayDescription","actionButtons","Object","_hover","_hoverableChanged","$","overlay","classList","add","remove","_hoverTextColor","window","getComputedStyle","color","attached","listen","detached","unlisten","_getClass","hovered","_actionButtonsChanged","_hasPrimaryBtn","_hasActionButtons","items","length","maxPrimaryButtons","x","isPrimary","_onDataChanged","_hasTitleActionBtn","_hasTitleSubtitleActionBtn","_hasData"],"mappings":"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","file":"px-tile.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-tile',\n\n    properties: {\n      /**\n       * If true, hovering over the card will cause an overlay to appear\n       * with more detailed information, including the description\n       * and an optional slot for showing a footer at the bottom.\n       * _Note: not recommended for mobile applications due to variation\n       * or lack of support for hover on mobile devices._\n       */\n      hoverable: {\n        type: Boolean,\n        value: false,\n        observer: '_hoverableChanged'\n      },\n      /**\n       * Whether the tile is currently being hovered.\n       */\n      _hovered: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Main text label for the tile.\n       */\n      mainTitle: {\n        type: String,\n        value: '',\n        observer: '_onDataChanged'\n      },\n      /**\n       * Subtitle text for the tile.\n       */\n      subtitle: {\n        type: String,\n        value: '',\n        observer: '_onDataChanged'\n      },\n       /**\n        * Description information to be displayed underneath tile and subtitle.\n        * Default : Only the first ~3 lines of text will be displayed, after which it will be truncated.\n        * You can customize by adjusting the `--px-tile-desc-text-height` CSS variable. (e.g. 1 line = 1 rem,\n        * to set to 5 lines truncated, set `--px-tile-desc-text-height: 5rem`).\n       */\n      description: {\n        type: String,\n        value: '',\n        observer: '_onDataChanged'\n      },\n      /**\n       * Description information to be displayed in the overlay of a hoverable card.\n       * It has more space to display text content and can be adjusted along with\n       * total height of the tile.\n       */\n      overlayDescription: {\n        type: String,\n        value: '',\n        observer: '_onDataChanged'\n      },\n      /**\n       * Configuration object for the action buttons displayed in the tile.\n       * The primary button is displayed in the header/title area of the tile\n       * whereas the rest are displayed at the bottom of the tile.\n       * The `px-tile-action-tapped` event is fired when any of the action buttons is tapped.\n       */\n      actionButtons: {\n        type: Object,\n        value: {},\n        observer: '_actionButtonsChanged'\n      }\n    },\n    /**\n     * Method used internally for flipping the hovered status of a tile.\n     */\n    _hover() {\n      if(this.hoverable) {\n        this._hovered = !this._hovered;\n      }\n    },\n    /**\n     * On change callback to remove overlay\n     */\n    _hoverableChanged() {\n      this.$.overlay.classList.add('overlay-remove');\n      if(this.hoverable) {\n        this.$.overlay.classList.remove('overlay-remove');\n        // extract overlay text color to pass to other components\n        this._hoverTextColor = window.getComputedStyle(this.$.overlay).color;\n      }\n    },\n    /**\n     * Attach event listeners for hoverable tiles.\n     */\n    attached() {\n      this.listen(this.$.overlay, 'mouseenter', '_hover');\n      this.listen(this.$.overlay, 'mouseleave', '_hover');\n    },\n    /**\n     * Detach event listeners for hoverable tiles.\n     */\n    detached() {\n      this.unlisten(this.$.overlay, 'mouseenter');\n      this.unlisten(this.$.overlay, 'mouseleave');\n    },\n    /**\n     * Returns class to control overlay for hoverable tiles.\n     */\n    _getClass(hovered) {\n      return hovered ? 'hovered' : '';\n    },\n    /**\n     * On change callback for actionButtons to set _hasActionButtons and _hasPrimaryBtn flag\n     */\n    _actionButtonsChanged() {\n      this._hasPrimaryBtn = false;\n      this._hasActionButtons = this.actionButtons && this.actionButtons.items && this.actionButtons.items.length > 0;\n      if(this._hasActionButtons) {\n        let maxPrimaryButtons = this.actionButtons.maxPrimaryButtons || 1;\n        for(let x in this.actionButtons.items) {\n          if(this.actionButtons.items[x].isPrimary) {\n            this._hasPrimaryBtn = true;\n            break;\n          }\n        }\n      }\n      this._onDataChanged();\n    },\n    /**\n     * On change callback for either property to set _hasTitleActionBtn, _hasTitleSubtitleActionBtn, and _hasData flags\n     */\n    _onDataChanged() {\n      this._hasTitleActionBtn = this.mainTitle && this.mainTitle.length > 0|| this._hasPrimaryBtn;\n      this._hasTitleSubtitleActionBtn = this.subtitle && this.subtitle.length > 0 || this._hasTitleActionBtn;\n      this._hasData = this._hasActionButtons || this._hasTitleSubtitleActionBtn;\n    }\n    /**\n     * @event px-tile-action-tapped\n     *\n     * Event fired when an item from actionButtons is tapped. `Evt.detail` includes the details of the tapped item, e.g. `{\"id\": \"1\", \"label\": \"Favorite\"}`\n     *\n     * Usage:\n     * ```\n     * window.addEventListener('px-tile-action-tapped', function(evt){\n     *   console.log(evt.detail);\n     * });\n     * ```\n     */\n  });\n})();\n"]}